{"version":3,"sources":["actions/proto.js","actions/messages.js","actions/connectionActions.js","containers/connectionStatus.js","components/MessageEntry.js","components/PrefixedInput.js","containers/chatProto.js","utils/utils.js","containers/messages.js","components/App.js","reducers/connection.js","reducers/proto.js","reducers/messages.js","reducers/index.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["initSelectroom","connection","dstRoom","dispatch","msgToken","uuidv4","selectRoomMessage","action","destination_room","token","type","payload","send","JSON","stringify","message_received","ev","protoMsg","parse","data","err","console","log","msg","status","nym","from_nym","handleAuthenticate","room","perPage","page","lastMessage","last_message","handleSelectRoom","content","date_created","handleRegularMessageRcvd","msgs","result","map","value","history","handleHistoryRcvd","conn","connectionClose","close","ConnectionStatus","this","props","initConnect","initAuthenticate","className","disabled","connected","connecting","onClick","authenticated","error","React","Component","connect","store","WebSocket","window","location","host","onopen","onerror","onclose","onmessage","authmessage","compWidth","PrefixedInput","commonHandler","input","current","message","startsWith","query","substr","split","length","String","nextRoom","changeRoom","sender","keyPrsHandler","keyCode","which","btnClickHandler","preventDefault","createRef","id","onKeyPress","ref","ChatProto","proto","sendMessage","sendQueryMenu","sendDisabled","Boolean","pendingMsgToken","menu","wsLastMessage","sendmessage","query_name","parameters","destinationRoom","clearToken","state","recvdToken","isMobileLayout","test","navigator","userAgent","MessageEntry","styleWidth","width","overflowWrap","style","dangerouslySetInnerHTML","__html","isHendrix","dateTime","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","timeConverter","date","time","src","alt","height","renderTxtDiv","expwidth","imgdim","Messages","lastScrollTop","messages","historyRetrieve","scrollTopHandler","st","viewPort","scrollTop","historyDisabled","prevMessages","index","dkey","key","prevMessage","closedscr","onScroll","position","overflow","overflowX","scrollbarWidth","scrollbarColor","marginBottom","border","borderRight","borderLeft","borderBottom","borderStyle","borderColor","alignItems","renderTemplate","App","initialState","rootReducer","combineReducers","createStore","applyMiddleware","logger","thunk","isLocalhost","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3836c629.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid'\nimport { handleRegularMessageRcvd, handleHistoryRcvd } from './messages'\nexport const PROTO_AUTH_STARTED = 'PROTO_AUTH_STARTED'\nexport const PROTO_AUTH_SUCCESS = 'PROTO_AUTH_SUCCESS'\nexport const PROTO_AUTH_FAIL = 'PROTO_AUTH_FAIL'\nexport const PROTO_SELROOM_STARTED = 'PROTO_SELROOM_STARTED'\nexport const PROTO_SELROOM_SUCCESS = 'PROTO_SELROOM_SUCCESS'\nexport const PROTO_SELROOM_FAIL = 'PROTO_SELROOM_FAIL'\nexport const PROTO_SEND_MSG = 'PROTO_SEND_MSG'\nexport const PROTO_UNKNOWN = 'PROTO_UNKNOWN'\nexport const PROTO_STUB_ACTION = 'PROTO_STUB_ACTION'\n\nconst defaultRoom = 'Lobby'\n\nexport function initAuthenticate(connection) {\n    return dispatch => {\n        const msgToken = uuidv4()\n        const authmessage = {\n            action: 'authenticate',\n            token: msgToken,\n        }\n        dispatch({\n            type: PROTO_AUTH_STARTED,\n            payload: msgToken,\n        })\n        connection.send(JSON.stringify(authmessage))\n    }\n}\nexport function initSelectroom(connection, dstRoom) {\n    return dispatch => {\n        const msgToken = uuidv4()\n        const selectRoomMessage = {\n            action: 'select_room',\n            destination_room: dstRoom,\n            token: msgToken,\n        }\n        dispatch({\n            type: PROTO_SELROOM_STARTED,\n            payload: msgToken,\n        })\n        connection.send(JSON.stringify(selectRoomMessage))\n    }\n}\n\nexport const sendMessage = (message, connection) => {\n    const msgToken = uuidv4()\n    let sendmessage = {\n        action: 'send_message',\n        token: msgToken,\n        content: message,\n    }\n    connection.send(JSON.stringify(sendmessage))\n    return {\n        type: PROTO_SEND_MSG,\n        payload: msgToken,\n    }\n}\n\nexport const sendQueryMenu = connection => {\n    const msgToken = uuidv4()\n    let sendmessage = {\n        action: 'query',\n        token: msgToken,\n        query_name: '/menu',\n        parameters: {},\n    }\n    connection.send(JSON.stringify(sendmessage))\n    return {\n        type: PROTO_SEND_MSG,\n        payload: msgToken,\n    }\n}\n\nexport function message_received(dispatch, connection) {\n    return ev => {\n        let protoMsg\n        try {\n            protoMsg = JSON.parse(ev.data)\n        } catch (err) {\n            console.log(`${err} - json.parse?`)\n            dispatch({\n                type: PROTO_UNKNOWN,\n                payload: ev.data,\n            })\n            return\n        }\n        switch (protoMsg.msg.action) {\n            case 'authenticate':\n                console.log('authenticate msg received')\n                handleAuthenticate(protoMsg, dispatch, connection)\n                break\n            case 'select_room':\n                console.log('select_room msg received')\n                handleSelectRoom(protoMsg, dispatch)\n                break\n            case 'send_message':\n                handleRegularMessageRcvd(protoMsg, dispatch)\n                break\n            case 'history_retrieve':\n                handleHistoryRcvd(protoMsg, dispatch)\n                break\n            default:\n                dispatch({\n                    type: PROTO_UNKNOWN,\n                    payload: ev.data,\n                })\n        }\n    }\n}\nfunction handleAuthenticate(protoMsg, dispatch, connection) {\n    switch (protoMsg.status) {\n        case 'success':\n            dispatch({\n                type: PROTO_AUTH_SUCCESS,\n                payload: {\n                    token: protoMsg.msg.token,\n                    nym: protoMsg.msg.from_nym,\n                },\n            })\n            initSelectroom(connection, defaultRoom)(dispatch)\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_AUTH_FAIL,\n                payload: {\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        default:\n            return\n    }\n}\n\nfunction handleSelectRoom(protoMsg, dispatch) {\n    switch (protoMsg.status) {\n        case 'success':\n            dispatch({\n                type: PROTO_SELROOM_SUCCESS,\n                payload: {\n                    token: protoMsg.msg.token,\n                    room: protoMsg.msg.room,\n                    perPage: protoMsg.msg.page,\n                    lastMessage: protoMsg.msg.last_message,\n                },\n            })\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_SELROOM_FAIL,\n                payload: {\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        default:\n            return\n    }\n}\n","import { v4 as uuidv4 } from 'uuid'\nexport const PROTO_MSG_RCVD = 'PROTO_MSG_RCVD'\nexport const PROTO_MSG_FAIL = 'PROTO_MSG_FAIL'\nexport const PROTO_HISTORY_GET_STARTED = 'PROTO_HISTORY_GET_STARTED'\nexport const PROTO_HISTORY_SUCCESS = 'PROTO_HISTORY_SUCCESS'\nexport const PROTO_HISTORY_FAIL = 'PROTO_HISTORY_FAIL'\n\nexport function handleRegularMessageRcvd(protoMsg, dispatch) {\n    switch (protoMsg.status) {\n        case 'success':\n            dispatch({\n                type: PROTO_MSG_RCVD,\n                payload: {\n                    content: protoMsg.msg.content,\n                    date_created: protoMsg.msg.date_created,\n                    from_nym: protoMsg.msg.from_nym,\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_MSG_FAIL,\n                payload: {\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        default:\n            return\n    }\n}\nexport function handleHistoryRcvd(protoMsg, dispatch) {\n    switch (protoMsg.status) {\n        case 'success':\n            const msgs = protoMsg.msg.result.map(value => {\n                return {\n                    content: value.content,\n                    date_created: value.date_created,\n                    from_nym: value.from_nym,\n                }\n            })\n            dispatch({\n                type: PROTO_HISTORY_SUCCESS,\n                payload: {\n                    token: protoMsg.msg.token,\n                    room: protoMsg.msg.room,\n                    history: msgs,\n                },\n            })\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_HISTORY_FAIL,\n                payload: protoMsg.msg.token,\n            })\n            break\n        default:\n            return\n    }\n}\n\nexport const historyRetrieve = (lastMessage, room, connection) => {\n    const msgToken = uuidv4()\n    let sendmessage = {\n        action: 'history_retrieve',\n        token: msgToken,\n        room: room,\n        last_message: lastMessage,\n    }\n    connection.send(JSON.stringify(sendmessage))\n    return {\n        type: PROTO_HISTORY_GET_STARTED,\n        payload: msgToken,\n    }\n}\n","import { message_received } from './proto.js'\nexport const CONNECT_TO_WS_REQUEST = 'CONNECT_TO_WS_REQUEST'\nexport const CONNECT_TO_WS_ESTABLISHED = 'CONNECT_TO_WS_ESTABLISHED'\nexport const CONNECT_TO_WS_ERRORED = 'CONNECT_TO_WS_ERRORED'\nexport const CONNECT_TO_WS_CLOSED = 'CONNECT_TO_WS_CLOSED'\n\nexport let conn = null\nexport function connectToWs() {\n    return dispatch => {\n        dispatch({\n            type: CONNECT_TO_WS_REQUEST,\n        })\n        conn = new WebSocket(`ws://${window.location.host}/ws`)\n        //conn = new WebSocket(`ws://${window.location.hostname}:8080/ws`)\n        conn.onopen = function(ev) {\n            dispatch({\n                type: CONNECT_TO_WS_ESTABLISHED,\n                payload: ev,\n            })\n        }\n\n        conn.onerror = function(ev) {\n            dispatch({\n                type: CONNECT_TO_WS_ERRORED,\n                payload: ev,\n            })\n        }\n        conn.onclose = function(ev) {\n            dispatch({\n                type: CONNECT_TO_WS_CLOSED,\n                payload: ev,\n            })\n        }\n\n        conn.onmessage = message_received(dispatch, conn)\n        console.log(conn)\n    }\n}\n\nexport function connectionClose() {\n    conn.close()\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport {\n    connectToWs,\n    connectionClose,\n    conn,\n} from '../actions/connectionActions'\nimport { initAuthenticate } from '../actions/proto'\nimport './connectionStatus.css'\n\nclass ConnectionStatus extends React.Component {\n    render() {\n        console.log('<ConnectionStatus/ >')\n        const { connection, initConnect, initAuthenticate } = this.props\n        return (\n            <div>\n                <button\n                    className=\"btn\"\n                    disabled={connection.connected || connection.connecting}\n                    onClick={initConnect}\n                >\n                    enter lobby\n                </button>\n                <button\n                    className=\"btn\"\n                    disabled={\n                        connection.authenticated ||\n                        !connection.connected ||\n                        connection.connecting\n                    }\n                    onClick={initAuthenticate}\n                >\n                    choose a sleeve\n                </button>\n                <button\n                    className=\"btn\"\n                    disabled={!(connection.connected || connection.connecting)}\n                    onClick={connectionClose}\n                >\n                    leave hendrix\n                </button>\n                <div>\n                    <p>\n                        status:{' '}\n                        {connection.connected ? 'connected' : 'disconnected'}\n                    </p>\n                    {connection.connecting ? <p>Connecting...</p> : null}\n                    <div>Error: {connection.error}</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        connection: store.connection,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        initConnect: () => dispatch(connectToWs()),\n        initAuthenticate: () => dispatch(initAuthenticate(conn)),\n    }\n}\n\nConnectionStatus.propTypes = {\n    connection: PropTypes.shape({\n        connected: PropTypes.bool.isRequired,\n        connecting: PropTypes.bool.isRequired,\n        authenticated: PropTypes.bool.isRequired,\n        error: PropTypes.string.isRequired,\n    }),\n    initConnect: PropTypes.func.isRequired,\n    initAuthenticate: PropTypes.func.isRequired,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ConnectionStatus)\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport './MessageEntry.css'\nimport { isMobileLayout } from '../utils/utils'\n\nexport let compWidth\nif (isMobileLayout()) {\n    compWidth = 300\n} else {\n    compWidth = 600\n}\nfunction timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000)\n    var months = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n    ]\n    var year = a.getFullYear()\n    var month = months[a.getMonth()]\n    var date = a.getDate()\n    var hour = a.getHours()\n    var min = a.getMinutes()\n    var sec = a.getSeconds()\n    var time = hour + ':' + min + ':' + sec\n    var dater = date + ' ' + month + ' ' + year + ' '\n    return [dater, time]\n}\nclass MessageEntry extends React.Component {\n    renderTxtDiv(content, compWidth) {\n        let styleWidth = {\n            width: `${compWidth}px`,\n            overflowWrap: 'break-word',\n        }\n        return (\n            <div\n                className=\"txt-content\"\n                style={styleWidth}\n                dangerouslySetInnerHTML={{\n                    __html: content,\n                }}\n            ></div>\n        )\n        //let elem = `<div className=\"txt-content\" style=\"width:${compWidth}px;overflow-wrap:break-word;\">${content}</div>`\n        //return elem\n    }\n\n    render() {\n        const { value } = this.props\n        const isHendrix = value.from_nym === 'hendrix'\n\n        const dateTime = timeConverter(value.date_created)\n        const date = dateTime[0]\n        const time = dateTime[1]\n        return (\n            <div className=\"entry-msg\">\n                <div className=\"image-frame block-msg\">\n                    {isHendrix ? (\n                        <img\n                            src=\"./hendrix.gif\"\n                            alt=\"hendrix\"\n                            width={68}\n                            height={90}\n                        ></img>\n                    ) : (\n                        <img\n                            src=\"./djunxiety.webp\"\n                            alt=\"djunxiety\"\n                            width={68}\n                            height={58}\n                        ></img>\n                    )}\n                </div>\n                <div className=\"block-msg msg-header\">\n                    {!isHendrix ? (\n                        <div className=\"nym-content\">{`${value.from_nym}`}</div>\n                    ) : null}\n                    <div className=\"date-msg\">{date}</div>\n                    <div className=\"date-msg\">{time}</div>\n                </div>\n                <div className=\"block-msg\">\n                    <div className=\"content\">\n                        {this.renderTxtDiv(value.content, compWidth)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nMessageEntry.propTypes = {\n    value: PropTypes.shape({\n        content: PropTypes.string.isRequired,\n        date_created: PropTypes.number.isRequired,\n        from_nym: PropTypes.string.isRequired,\n        token: PropTypes.string,\n    }),\n}\nexport { MessageEntry }\n","import React from 'react'\nimport './PrefixedInput.css'\n\nconst menuSpecial = '/menu'\nconst rentRoom = '/rent-lavatory-room'\n\nfunction isString(value) {\n    return typeof value === 'string' || value instanceof String\n}\n\nclass PrefixedInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.input = React.createRef()\n    }\n    commonHandler = () => {\n        if (!this.input.current.value) return\n        let message = this.input.current.value\n        this.input.current.value = ''\n        if (message.startsWith(menuSpecial)) {\n            this.props.query()\n        } else if (message.startsWith(rentRoom)) {\n            let substr = message.split(' ')\n            if (\n                substr.length === 2 &&\n                isString(substr[1]) &&\n                substr[1].length > 0\n            ) {\n                let nextRoom = substr[1]\n                console.log(nextRoom)\n                this.props.changeRoom(nextRoom)\n            } else {\n                return\n            }\n        } else {\n            this.props.sender(message)\n        }\n    }\n\n    keyPrsHandler = ev => {\n        if (ev.keyCode === 13 || ev.which === 13) {\n            console.log(ev)\n            this.commonHandler()\n            return false\n        } else {\n            return true\n        }\n    }\n\n    btnClickHandler = ev => {\n        ev.preventDefault()\n        this.commonHandler()\n    }\n    render() {\n        const { disabled } = this.props\n        return (\n            <div>\n                <button\n                    className=\"btn shifted-btn\"\n                    onClick={this.btnClickHandler}\n                    disabled={disabled}\n                >\n                    {' '}\n                    say\n                </button>\n                <div className=\"pref-input-container\">\n                    <input\n                        id=\"unique_say\"\n                        className=\"prefixed-input\"\n                        type=\"text\"\n                        onKeyPress={this.keyPrsHandler}\n                        disabled={disabled}\n                        ref={this.input}\n                    />\n                    <span className=\"inside-prefixed-input\">$</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport { PrefixedInput }\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport { connect } from 'react-redux'\n//import {} from '../actions/proto'\nimport { PrefixedInput } from '../components/PrefixedInput'\nimport { conn } from '../actions/connectionActions'\nimport { sendMessage, sendQueryMenu, initSelectroom } from '../actions/proto'\nimport './ChatProto.css'\n\nclass ChatProto extends React.Component {\n    render() {\n        console.log('<ChatProto/ >')\n        const { proto, sendMessage, sendQueryMenu, initSelectroom } = this.props\n        let sendDisabled =\n            Boolean(proto.pendingMsgToken) || !Boolean(proto.room)\n        let menu = proto.room === 'Lobby' ? sendQueryMenu : () => {}\n        return (\n            <div className=\"chat-proto\">\n                <p> latest message: {proto.wsLastMessage}</p>\n                <p> msg pending: {proto.pendingMsgToken} </p>\n                <PrefixedInput\n                    sender={sendMessage}\n                    query={menu}\n                    changeRoom={initSelectroom}\n                    disabled={sendDisabled}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        proto: store.proto,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        sendMessage: message => dispatch(sendMessage(message, conn)),\n        sendQueryMenu: () => dispatch(sendQueryMenu(conn)),\n        initSelectroom: destinationRoom =>\n            dispatch(initSelectroom(conn, destinationRoom)),\n    }\n}\n\nChatProto.propTypes = {\n    proto: PropTypes.shape({\n        wsLastMessage: PropTypes.string,\n        nym: PropTypes.string,\n        pendingMsgToken: PropTypes.string.isRequired,\n        room: PropTypes.string,\n        perPage: PropTypes.number,\n        lastMessage: PropTypes.number,\n    }),\n    sendMessage: PropTypes.func.isRequired,\n    sendQueryMenu: PropTypes.func.isRequired,\n    initSelectroom: PropTypes.func.isRequired,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatProto)\n","export function clearToken(state, recvdToken) {\n    if (recvdToken === state.pendingMsgToken) {\n        return ''\n    } else {\n        return state.pendingMsgToken\n    }\n}\n\nexport function isMobileLayout() {\n    if (\n        /Mobile|Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(\n            navigator.userAgent\n        )\n    ) {\n        return true\n    } else {\n        return false\n    }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport { MessageEntry } from '../components/MessageEntry'\nimport { conn } from '../actions/connectionActions'\nimport { historyRetrieve } from '../actions/messages'\nimport { compWidth } from '../components/MessageEntry'\nimport { isMobileLayout } from '../utils/utils'\nimport './messages.css'\n\nconst alert1 = \"You've been resleeved to a stock option: \"\nconst alert2 =\n    '\\nRegular customers of Hendrix are offered a wide selection of bespoke sleeves.'\n\nlet expwidth = compWidth + 200\nlet imgdim = isMobileLayout? 500 : 600\nclass Messages extends React.Component {\n    state = {\n        lastScrollTop: null,\n    }\n    constructor(props) {\n        super(props)\n        this.viewPort = React.createRef()\n    }\n\n    historyDisabled(pendingMsgToken, room, lastMessage) {\n        return Boolean(pendingMsgToken) || !Boolean(room) || lastMessage < 0\n    }\n    renderTemplate(messages) {\n        var res = messages.map((value, index) => {\n            let dkey = String(value.date_created) + index\n            return <MessageEntry key={dkey} value={value} />\n        })\n        return res\n    }\n    btnClickHandler = ev => {\n        const { lastMessage, room } = this.props.messages\n        this.props.historyRetrieve(lastMessage, room)\n    }\n\n    prevMessages(lastMessage) {\n        if (lastMessage == null) {\n            return 0\n        }\n        let prevMessage = lastMessage > -1 ? lastMessage + 1 : null\n        return prevMessage > 0 ? prevMessage : 0\n    }\n    scrollTopHandler = () => {\n        const st = this.viewPort.current.scrollTop\n        if (this.state.lastScrollTop == null) {\n            this.state.lastScrollTop = st <= 0 ? 0 : st // eslint-disable-line\n            return\n        }\n        if (st > this.state.lastScrollTop) {\n        } else {\n            if (st < 50) {\n                const {\n                    lastMessage,\n                    room,\n                    pendingMsgToken,\n                } = this.props.messages\n                if (!this.historyDisabled(pendingMsgToken, room, lastMessage)) {\n                    this.props.historyRetrieve(lastMessage, room)\n                }\n                if (this.prevMessages(lastMessage)) {\n                    this.viewPort.current.scrollTop = this.state.lastScrollTop\n                    return\n                }\n            }\n        }\n        this.state.lastScrollTop = st <= 0 ? 0 : st // eslint-disable-line\n    }\n    render() {\n        console.log('<Messages/ >')\n        const {\n            messages,\n            pendingMsgToken,\n            room,\n            lastMessage,\n            nym,\n            closedscr,\n        } = this.props.messages\n        let historyDisabled = this.historyDisabled(\n            pendingMsgToken,\n            room,\n            lastMessage,\n        )\n\n        let prevMessage = this.prevMessages(lastMessage)\n        console.log(`history disabled: ${historyDisabled}`)\n        return (\n            <div className=\"msgs\">\n                <p> Messages </p>\n                <div>\n                    your sleeve:{'  '}\n                    <div className=\"tooltip\">\n                        {nym}\n                        <div className=\"tooltiptext\">\n                            <p>{`${alert1}${nym}.`}</p>\n                            <p>{`${alert2}`}</p>\n                        </div>\n                    </div>\n                </div>\n                <p> room: {room}</p>\n                {prevMessage ? <p> prev messages: {prevMessage} </p> : null}\n                <button\n                    className=\"btn\"\n                    onClick={this.btnClickHandler}\n                    disabled={historyDisabled}\n                >\n                    {' '}\n                    hist\n                </button>\n\n                <div\n                    className=\"viewport\"\n                    id=\"containerElement\"\n                    ref={this.viewPort}\n                    onScroll={this.scrollTopHandler}\n                    style={{\n                        position: 'relative',\n                        height: '600px',\n                        width: `${expwidth}px`,\n                        overflow: 'scroll',\n                        overflowX: 'hidden',\n                        scrollbarWidth: 'thick',\n                        scrollbarColor: '#444444 #000000',\n                        marginBottom: '30px',\n                        border: '1px',\n                        borderRight: '0px',\n                        borderLeft: '0px',\n                        borderBottom: '1px',\n                        borderStyle: 'solid',\n                        borderColor: '#444444',\n                        alignItems: 'center',\n                    }}\n                >\n                    {closedscr ? (\n                        <img\n                            src=\"./ecorp.gif\"\n                            alt=\"hendrix\"\n                            width={imgdim}\n                            height={imgdim}\n                        ></img>\n                    ) : (\n                        this.renderTemplate(messages)\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        messages: store.messages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        historyRetrieve: (lastMessage, room) =>\n            dispatch(historyRetrieve(lastMessage, room, conn)),\n    }\n}\n\nMessages.propTypes = {\n    messages: PropTypes.shape({\n        messages: PropTypes.array.isRequired,\n        nym: PropTypes.string,\n        lastMessage: PropTypes.number,\n        room: PropTypes.string,\n        perPage: PropTypes.number,\n        pendingMsgToken: PropTypes.string.isRequired,\n        closed: PropTypes.bool,\n    }),\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages)\n","import React from 'react'\nimport ConnectionStatus from '../containers/connectionStatus.js'\nimport ChatProto from '../containers/chatProto'\nimport Messages from '../containers/messages'\nimport './App.css'\nimport { isMobileLayout } from '../utils/utils'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className={isMobileLayout() ? 'not-centered' : 'centered'}>\n                <div>\n                    <header className=\"App-header\">hendrix</header>\n                    <ConnectionStatus />\n                    <Messages />\n                    <ChatProto />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import {\n    CONNECT_TO_WS_REQUEST,\n    CONNECT_TO_WS_ESTABLISHED,\n    CONNECT_TO_WS_ERRORED,\n    CONNECT_TO_WS_CLOSED,\n} from '../actions/connectionActions.js'\nimport { PROTO_AUTH_SUCCESS } from '../actions/proto'\nconst initialState = {\n    connected: false,\n    connecting: false,\n    authenticated: false,\n    error: '',\n}\n\nexport function connectionReducer(state = initialState, action) {\n    switch (action.type) {\n        case CONNECT_TO_WS_REQUEST:\n            return {\n                ...state,\n                connecting: true,\n            }\n        case CONNECT_TO_WS_ERRORED:\n            return {\n                ...state,\n                connecting: false,\n                error: action.payload.type,\n            }\n        case CONNECT_TO_WS_ESTABLISHED:\n            return {\n                ...state,\n                connecting: false,\n                connected: true,\n            }\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                connecting: false,\n                connected: false,\n                authenticated: false,\n            }\n        case PROTO_AUTH_SUCCESS:\n            return {\n                ...state,\n                authenticated: true,\n            }\n        default:\n            return state\n    }\n}\n","import {\n    PROTO_AUTH_STARTED,\n    PROTO_AUTH_SUCCESS,\n    PROTO_AUTH_FAIL,\n    PROTO_SELROOM_STARTED,\n    PROTO_SELROOM_SUCCESS,\n    PROTO_SELROOM_FAIL,\n    PROTO_UNKNOWN,\n    PROTO_SEND_MSG,\n} from '../actions/proto'\nimport {\n    PROTO_MSG_RCVD,\n    PROTO_MSG_FAIL,\n    PROTO_HISTORY_GET_STARTED,\n    PROTO_HISTORY_FAIL,\n    PROTO_HISTORY_SUCCESS,\n} from '../actions/messages'\nimport { CONNECT_TO_WS_CLOSED } from '../actions/connectionActions'\nimport { clearToken } from '../utils/utils'\n\nconst initialState = {\n    wsLastMessage: null,\n    nym: null,\n    pendingMsgToken: '', //false in boolean context\n    room: null,\n    perPage: null,\n    lastMessage: null, //proto - room last msg pointer/counter\n}\n\nexport function protoReducer(state = initialState, action) {\n    switch (action.type) {\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                pendingMsgToken: '',\n                nym: null,\n                room: null,\n                perPage: null,\n                lastMessage: null,\n                wsLastMessage: 'exited lobby',\n            }\n        case PROTO_AUTH_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_AUTH_SUCCESS:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n                nym: action.payload.nym,\n            }\n        case PROTO_AUTH_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_SELROOM_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_SELROOM_SUCCESS:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n                room: action.payload.room,\n                perPage: action.payload.perPage,\n                lastMessage: action.payload.lastMessage,\n            }\n        case PROTO_SELROOM_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_SEND_MSG:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_MSG_RCVD:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_MSG_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_HISTORY_GET_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_HISTORY_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload),\n            }\n        case PROTO_HISTORY_SUCCESS:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_UNKNOWN:\n            return {\n                ...state,\n                wsLastMessage: action.payload,\n            }\n        default:\n            return state\n    }\n}\n","import { PROTO_SELROOM_SUCCESS, PROTO_AUTH_SUCCESS } from '../actions/proto'\nimport {\n    PROTO_MSG_RCVD,\n    PROTO_HISTORY_GET_STARTED,\n    PROTO_HISTORY_FAIL,\n    PROTO_HISTORY_SUCCESS,\n} from '../actions/messages'\nimport { CONNECT_TO_WS_CLOSED } from '../actions/connectionActions'\nimport { clearToken } from '../utils/utils'\n\nconst initialState = {\n    messages: [],\n    nym: null,\n    lastMessage: null, //proto - room last msg pointer/counter\n    room: null,\n    perPage: null,\n    pendingMsgToken: '',\n    closedscr: null,\n}\n\nexport function messagesReducer(state = initialState, action) {\n    switch (action.type) {\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                messages: [],\n                pendingMsgToken: '',\n                lastMessage: null,\n                room: null,\n                perPage: null,\n                nym: null,\n                closedscr: true,\n            }\n        case PROTO_AUTH_SUCCESS:\n            return {\n                ...state,\n                nym: action.payload.nym,\n                closedscr: false,\n            }\n        case PROTO_SELROOM_SUCCESS:\n            return {\n                ...state,\n                messages: [],\n                lastMessage: action.payload.lastMessage,\n                room: action.payload.room,\n                perPage: action.payload.perPage,\n            }\n        case PROTO_MSG_RCVD:\n            return {\n                ...state,\n                messages: [...state.messages, action.payload],\n            }\n        case PROTO_HISTORY_GET_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_HISTORY_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload),\n            }\n        case PROTO_HISTORY_SUCCESS:\n            if (state.room === action.payload.room) {\n                return {\n                    ...state,\n                    lastMessage: state.lastMessage - state.perPage,\n                    messages: [...action.payload.history, ...state.messages],\n                    pendingMsgToken: clearToken(state, action.payload.token),\n                }\n            } else {\n                return {\n                    ...state,\n                    pendingMsgToken: clearToken(state, action.payload.token),\n                }\n            }\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport { connectionReducer } from './connection'\nimport { protoReducer } from './proto'\nimport { messagesReducer } from './messages'\n\nexport const rootReducer = combineReducers({\n    connection: connectionReducer,\n    proto: protoReducer,\n    messages: messagesReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from '../reducers'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\n//export const store = createStore(() => {}, {})\nexport const store = createStore(rootReducer, applyMiddleware(logger, thunk))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nimport { Provider } from 'react-redux'\nimport { store } from './store/configureStore'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register()\n"],"sourceRoot":""}