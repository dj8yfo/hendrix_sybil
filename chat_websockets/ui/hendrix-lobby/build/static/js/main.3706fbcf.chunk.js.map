{"version":3,"sources":["utils/utils.js","containers/connectionStatus.js","components/MessageEntry.js","actions/proto.js","actions/messages.js","actions/connectionActions.js","containers/messages.js","components/PrefixedInput.js","containers/chatProto.js","containers/connectionButtons.js","components/App.js","reducers/connection.js","reducers/proto.js","reducers/messages.js","reducers/lastMessage.js","reducers/index.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["clearToken","state","recvdToken","pendingMsgToken","isMobileLayout","test","navigator","userAgent","prevMessages","lastMessage","prevMessage","compWidth","ConnectionStatus","proto","this","props","unhandledWsMessage","connection","messages","statusLast","fsize","className","style","fontSize","data-tooltip","JSON","stringify","info","data-tooltip-location","connected","connecting","nym","room","computeTooltip","React","Component","connect","store","MessageEntry","content","styleWidth","width","overflowWrap","dangerouslySetInnerHTML","__html","value","color","isHendrix","from_nym","dateTime","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","date_created","time","imageClass","classNames","blurredClass","ref","inputRef","src","alt","height","renderTxtDiv","initSelectroom","dstRoom","dispatch","msgToken","uuidv4","selectRoomMessage","action","destination_room","token","type","payload","send","message_received","ev","protoMsg","parse","data","err","msg","status","handleAuthenticate","perPage","page","last_message","handleSelectRoom","viewed","setTimeout","handleRegularMessageRcvd","msgs","result","map","history","handleHistoryRcvd","conn","connectionClose","close","expwidth","imgdim","Messages","lastScrollTop","maxScroll","colors","childrefs","btnClickHandler","historyRetrieve","scrollTopHandler","st","viewPort","current","scrollTop","ofhei","offsetHeight","checkViewedMessaged","historyDisabled","createRef","Boolean","index","undefined","i","Math","floor","random","getRandomColor","newcolor","dkey","String","key","element","push","currentScroll","ifDispatch","filter","forEach","bottom","offsetTop","indicateNewMessages","closedscr","notifyFlag","colorScroll","hasunviewed","length","arrowshift","onClick","disabled","id","onScroll","position","overflow","overflowX","scrollbarWidth","scrollbarColor","marginBottom","border","borderRight","borderLeft","borderBottom","borderStyle","borderColor","alignItems","Fragment","renderTemplate","left","top","sendmessage","flag","PrefixedInput","commonHandler","input","message","startsWith","query","substr","split","nextRoom","changeRoom","sender","keyPrsHandler","keyCode","which","preventDefault","onKeyPress","marginLeft","ChatProto","sendMessage","sendQueryMenu","sendDisabled","menu","query_name","parameters","destinationRoom","ConnectionButtons","initConnect","initAuthenticate","paddingRight","authenticated","WebSocket","window","location","host","onopen","onerror","onclose","onmessage","authmessage","App","initialState","error","rootReducer","combineReducers","createStore","applyMiddleware","thunk","isLocalhost","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3706fbcf.chunk.js","sourcesContent":["export function clearToken(state, recvdToken) {\n    if (recvdToken === state.pendingMsgToken) {\n        return ''\n    } else {\n        return state.pendingMsgToken\n    }\n}\n\nexport function isMobileLayout() {\n    if (\n        /Mobile|Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(\n            navigator.userAgent\n        )\n    ) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function getRandomColor() {\n    var letters = '0123456789ABCDEF'\n    var color = '#'\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)]\n    }\n    return color\n}\n\nexport function prevMessages(lastMessage) {\n    if (lastMessage == null) {\n        return 0\n    }\n    let prevMessage = lastMessage > -1 ? lastMessage + 1 : null\n    return prevMessage > 0 ? prevMessage : 0\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport './connectionStatus.css'\nimport { prevMessages, isMobileLayout } from '../utils/utils'\n\nconst alert1 = \"You've been resleeved to a stock option: \"\nconst alert2 =\n    '\\nRegular customers of Hendrix are offered a wide selection of bespoke sleeves.'\n\nclass ConnectionStatus extends React.Component {\n    computeTooltip() {\n        const { proto } = this.props\n        return proto.pendingMsgToken || proto.unhandledWsMessage\n    }\n    render() {\n        const { connection, messages, statusLast } = this.props\n        let prevMessage = prevMessages(messages.lastMessage)\n        let fsize = isMobileLayout() ? '80%' : '100%'\n        return (\n            <div\n                className=\"stats\"\n                style={{\n                    fontSize: fsize,\n                }}\n            >\n                <p\n                    data-tooltip={JSON.stringify(statusLast.info)}\n                    data-tooltip-location=\"right\"\n                >\n                    status:{' '}\n                    {connection.connected\n                        ? 'connected'\n                        : connection.connecting\n                        ? 'connecting'\n                        : 'disconnected'}\n                </p>\n                <div>\n                    sleeve:{' '}\n                    <text\n                        data-tooltip={`${alert1}${messages.nym}.\\n${alert2}`}\n                        data-tooltip-location=\"right\"\n                    >\n                        {messages.nym}\n                    </text>\n                </div>\n                <p> room: {messages.room}</p>\n                <p> prev messages: {prevMessage ? prevMessage : 'None'} </p>\n\n                <div>\n                    <div className=\"block-msg\">\n                        <text\n                            data-tooltip={this.computeTooltip()}\n                            data-tooltip-location=\"right\"\n                        >\n                            σ tip σ\n                        </text>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        connection: store.connection,\n        messages: store.messages,\n        proto: store.proto,\n        statusLast: store.statusLast,\n    }\n}\n\nConnectionStatus.propTypes = {\n    connection: PropTypes.shape({\n        connected: PropTypes.bool.isRequired,\n        connecting: PropTypes.bool.isRequired,\n        authenticated: PropTypes.bool.isRequired,\n        error: PropTypes.string.isRequired,\n    }),\n    proto: PropTypes.shape({\n        unhandledWsMessage: PropTypes.string,\n        pendingMsgToken: PropTypes.string.isRequired,\n    }),\n}\nexport default connect(mapStateToProps)(ConnectionStatus)\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport './MessageEntry.css'\nimport { isMobileLayout } from '../utils/utils'\nimport classNames from 'classnames'\n\nexport let compWidth\nif (isMobileLayout()) {\n    compWidth = 260\n} else {\n    compWidth = 600\n}\nfunction timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000)\n    var months = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n    ]\n    var year = a.getFullYear()\n    var month = months[a.getMonth()]\n    var date = a.getDate()\n    var hour = a.getHours()\n    hour = hour < 10 ? '0' + hour : hour\n    var min = a.getMinutes()\n    min = min < 10 ? '0' + min : min\n    var sec = a.getSeconds()\n    sec = sec < 10 ? '0' + sec : sec\n    var time = hour + ':' + min + ':' + sec\n    var dater = date + ' ' + month + ' ' + year + ' '\n    return [dater, time]\n}\nclass MessageEntry extends React.Component {\n    renderTxtDiv(content, compWidth) {\n        let styleWidth = {\n            width: `${compWidth}px`,\n            overflowWrap: 'break-word',\n        }\n        return (\n            <div\n                className=\"txt-content\"\n                style={styleWidth}\n                dangerouslySetInnerHTML={{\n                    __html: content,\n                }}\n            ></div>\n        )\n        //let elem = `<div className=\"txt-content\" style=\"width:${compWidth}px;overflow-wrap:break-word;\">${content}</div>`\n        //return elem\n    }\n\n    render() {\n        const { value, color } = this.props\n        const isHendrix = value.from_nym === 'hendrix'\n\n        const dateTime = timeConverter(value.date_created)\n        const date = dateTime[0]\n        const time = dateTime[1]\n        const imageClass = classNames('bg-border-blur')\n        const blurredClass = classNames(\n            { 'bg-image-blur': !isHendrix },\n            'image-frame',\n            'block-msg'\n        )\n        return (\n            <div className=\"entry-msg\" ref={this.props.inputRef}>\n                <div className={blurredClass}>\n                    <div className={imageClass}>\n                        {isHendrix ? (\n                            <img\n                                src=\"./hendrix.gif\"\n                                alt=\"hendrix\"\n                                className=\"immg\"\n                                width={68}\n                                height={90}\n                            ></img>\n                        ) : (\n                            <img\n                                src=\"./djunxiety.webp\"\n                                alt=\"djunxiety\"\n                                className=\"immg\"\n                                width={68}\n                                height={58}\n                            ></img>\n                        )}\n                    </div>\n                </div>\n                <div className=\"block-msg msg-header\">\n                    {!isHendrix ? (\n                        <div className=\"nym-content\">\n                            <font color={color}>{`${value.from_nym}`}</font>\n                        </div>\n                    ) : null}\n                    <div className=\"date-msg\">{date}</div>\n                    <div className=\"date-msg\">{time}</div>\n                </div>\n                <div className=\"block-msg\">\n                    <div className=\"content\">\n                        {this.renderTxtDiv(value.content, compWidth)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nMessageEntry.propTypes = {\n    value: PropTypes.shape({\n        content: PropTypes.string.isRequired,\n        date_created: PropTypes.number.isRequired,\n        from_nym: PropTypes.string.isRequired,\n        token: PropTypes.string,\n    }),\n    color: PropTypes.string.isRequired,\n}\nexport { MessageEntry }\n","import { v4 as uuidv4 } from 'uuid'\nimport { handleRegularMessageRcvd, handleHistoryRcvd } from './messages'\nexport const PROTO_AUTH_STARTED = 'PROTO_AUTH_STARTED'\nexport const PROTO_AUTH_SUCCESS = 'PROTO_AUTH_SUCCESS'\nexport const PROTO_AUTH_FAIL = 'PROTO_AUTH_FAIL'\nexport const PROTO_SELROOM_STARTED = 'PROTO_SELROOM_STARTED'\nexport const PROTO_SELROOM_SUCCESS = 'PROTO_SELROOM_SUCCESS'\nexport const PROTO_SELROOM_FAIL = 'PROTO_SELROOM_FAIL'\nexport const PROTO_SEND_MSG = 'PROTO_SEND_MSG'\nexport const PROTO_UNKNOWN = 'PROTO_UNKNOWN'\nexport const PROTO_GENERIC = 'PROTO_GENERIC'\nexport const PROTO_STUB_ACTION = 'PROTO_STUB_ACTION'\n\nconst defaultRoom = 'Lobby'\n\nexport function initAuthenticate(connection) {\n    return dispatch => {\n        const msgToken = uuidv4()\n        const authmessage = {\n            action: 'authenticate',\n            token: msgToken,\n        }\n        dispatch({\n            type: PROTO_AUTH_STARTED,\n            payload: msgToken,\n        })\n        connection.send(JSON.stringify(authmessage))\n    }\n}\nexport function initSelectroom(connection, dstRoom) {\n    return dispatch => {\n        const msgToken = uuidv4()\n        const selectRoomMessage = {\n            action: 'select_room',\n            destination_room: dstRoom,\n            token: msgToken,\n        }\n        dispatch({\n            type: PROTO_SELROOM_STARTED,\n            payload: msgToken,\n        })\n        connection.send(JSON.stringify(selectRoomMessage))\n    }\n}\n\nexport const sendMessage = (message, connection) => {\n    const msgToken = uuidv4()\n    let sendmessage = {\n        action: 'send_message',\n        token: msgToken,\n        content: message,\n    }\n    connection.send(JSON.stringify(sendmessage))\n    return {\n        type: PROTO_SEND_MSG,\n        payload: msgToken,\n    }\n}\n\nexport const sendQueryMenu = connection => {\n    const msgToken = uuidv4()\n    let sendmessage = {\n        action: 'query',\n        token: msgToken,\n        query_name: '/menu',\n        parameters: {},\n    }\n    connection.send(JSON.stringify(sendmessage))\n    return {\n        type: PROTO_SEND_MSG,\n        payload: msgToken,\n    }\n}\n\nexport function message_received(dispatch, connection) {\n    return ev => {\n        let protoMsg\n        try {\n            protoMsg = JSON.parse(ev.data)\n        } catch (err) {\n            dispatch({\n                type: PROTO_UNKNOWN,\n                payload: ev.data,\n            })\n            return\n        }\n        dispatch({\n            type: PROTO_GENERIC,\n            payload: protoMsg,\n        })\n        switch (protoMsg.msg.action) {\n            case 'authenticate':\n                handleAuthenticate(protoMsg, dispatch, connection)\n                break\n            case 'select_room':\n                handleSelectRoom(protoMsg, dispatch)\n                break\n            case 'send_message':\n                handleRegularMessageRcvd(protoMsg, dispatch)\n                break\n            case 'history_retrieve':\n                handleHistoryRcvd(protoMsg, dispatch)\n                break\n            default:\n                dispatch({\n                    type: PROTO_UNKNOWN,\n                    payload: ev.data,\n                })\n        }\n    }\n}\nfunction handleAuthenticate(protoMsg, dispatch, connection) {\n    switch (protoMsg.status) {\n        case 'success':\n            dispatch({\n                type: PROTO_AUTH_SUCCESS,\n                payload: {\n                    token: protoMsg.msg.token,\n                    nym: protoMsg.msg.from_nym,\n                },\n            })\n            initSelectroom(connection, defaultRoom)(dispatch)\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_AUTH_FAIL,\n                payload: {\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        default:\n            return\n    }\n}\n\nfunction handleSelectRoom(protoMsg, dispatch) {\n    switch (protoMsg.status) {\n        case 'success':\n            dispatch({\n                type: PROTO_SELROOM_SUCCESS,\n                payload: {\n                    token: protoMsg.msg.token,\n                    room: protoMsg.msg.room,\n                    perPage: protoMsg.msg.page,\n                    lastMessage: protoMsg.msg.last_message,\n                },\n            })\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_SELROOM_FAIL,\n                payload: {\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        default:\n            return\n    }\n}\n","import { v4 as uuidv4 } from 'uuid'\nexport const PROTO_MSG_RCVD = 'PROTO_MSG_RCVD'\nexport const PROTO_MSG_CLEAR_NOTIFY = 'PROTO_MSG_CLEAR_NOTIFY'\nexport const PROTO_MSG_FAIL = 'PROTO_MSG_FAIL'\nexport const PROTO_HISTORY_GET_STARTED = 'PROTO_HISTORY_GET_STARTED'\nexport const PROTO_HISTORY_SUCCESS = 'PROTO_HISTORY_SUCCESS'\nexport const PROTO_HISTORY_FAIL = 'PROTO_HISTORY_FAIL'\nexport const CHANGED_NEW_MESSAGES_INDICATOR = 'CHANGED_NEW_MESSAGES_INDICATOR'\n\nconst flashTimeout = 1000\nexport function handleRegularMessageRcvd(protoMsg, dispatch) {\n    switch (protoMsg.status) {\n        case 'success':\n            dispatch({\n                type: PROTO_MSG_RCVD,\n                payload: {\n                    content: protoMsg.msg.content,\n                    date_created: protoMsg.msg.date_created,\n                    from_nym: protoMsg.msg.from_nym,\n                    token: protoMsg.msg.token,\n                    viewed: false,\n                },\n            })\n            setTimeout(() => {\n                dispatch({\n                    type: PROTO_MSG_CLEAR_NOTIFY,\n                })\n            }, flashTimeout)\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_MSG_FAIL,\n                payload: {\n                    token: protoMsg.msg.token,\n                },\n            })\n            break\n        default:\n            return\n    }\n}\nexport function handleHistoryRcvd(protoMsg, dispatch) {\n    switch (protoMsg.status) {\n        case 'success':\n            const msgs = protoMsg.msg.result.map(value => {\n                return {\n                    content: value.content,\n                    date_created: value.date_created,\n                    from_nym: value.from_nym,\n                    viewed: true,\n                }\n            })\n            dispatch({\n                type: PROTO_HISTORY_SUCCESS,\n                payload: {\n                    token: protoMsg.msg.token,\n                    room: protoMsg.msg.room,\n                    history: msgs,\n                },\n            })\n            break\n        case 'error':\n            dispatch({\n                type: PROTO_HISTORY_FAIL,\n                payload: protoMsg.msg.token,\n            })\n            break\n        default:\n            return\n    }\n}\n\nexport const historyRetrieve = (lastMessage, room, connection) => {\n    const msgToken = uuidv4()\n    let sendmessage = {\n        action: 'history_retrieve',\n        token: msgToken,\n        room: room,\n        last_message: lastMessage,\n    }\n    connection.send(JSON.stringify(sendmessage))\n    return {\n        type: PROTO_HISTORY_GET_STARTED,\n        payload: msgToken,\n    }\n}\n\nexport const indicateNewMessages = messages => {\n    return {\n        type: CHANGED_NEW_MESSAGES_INDICATOR,\n        payload: messages,\n    }\n}\n","import { message_received } from './proto.js'\nexport const CONNECT_TO_WS_REQUEST = 'CONNECT_TO_WS_REQUEST'\nexport const CONNECT_TO_WS_ESTABLISHED = 'CONNECT_TO_WS_ESTABLISHED'\nexport const CONNECT_TO_WS_ERRORED = 'CONNECT_TO_WS_ERRORED'\nexport const CONNECT_TO_WS_CLOSED = 'CONNECT_TO_WS_CLOSED'\n\nexport let conn = null\nexport function connectToWs() {\n    return dispatch => {\n        dispatch({\n            type: CONNECT_TO_WS_REQUEST,\n        })\n        conn = new WebSocket(`wss://${window.location.host}/ws`)\n        //conn = new WebSocket(`wss://${window.location.hostname}:443/ws`)\n        conn.onopen = function(ev) {\n            dispatch({\n                type: CONNECT_TO_WS_ESTABLISHED,\n                payload: ev,\n            })\n        }\n\n        conn.onerror = function(ev) {\n            dispatch({\n                type: CONNECT_TO_WS_ERRORED,\n                payload: ev,\n            })\n        }\n        conn.onclose = function(ev) {\n            dispatch({\n                type: CONNECT_TO_WS_CLOSED,\n                payload: ev,\n            })\n        }\n\n        conn.onmessage = message_received(dispatch, conn)\n    }\n}\n\nexport function connectionClose() {\n    conn.close()\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport { MessageEntry } from '../components/MessageEntry'\nimport { conn } from '../actions/connectionActions'\nimport { historyRetrieve, indicateNewMessages } from '../actions/messages'\nimport { compWidth } from '../components/MessageEntry'\nimport { isMobileLayout, getRandomColor, prevMessages } from '../utils/utils'\nimport './messages.css'\n\nexport let expwidth = compWidth + 200\nlet imgdim = isMobileLayout ? 500 : 600\nclass Messages extends React.Component {\n    state = {\n        lastScrollTop: null,\n        maxScroll: null,\n        colors: {},\n        childrefs: null,\n        messages: [],\n    }\n    constructor(props) {\n        super(props)\n        this.viewPort = React.createRef()\n    }\n\n    historyDisabled(pendingMsgToken, room, lastMessage) {\n        return Boolean(pendingMsgToken) || !Boolean(room) || lastMessage < 0\n    }\n\n    renderTemplate(messages) {\n        this.state.messages = [...this.props.messages.messages] // eslint-disable-line\n        this.state.childrefs = [] // eslint-disable-line\n        var res = messages.map((value, index) => {\n            if (this.state.colors[value.from_nym] === undefined) {\n                this.state.colors[value.from_nym] = getRandomColor() // eslint-disable-line\n            }\n            let newcolor = this.state.colors[value.from_nym]\n            let dkey = String(value.date_created) + index\n            let result = (\n                <MessageEntry\n                    key={dkey}\n                    value={value}\n                    color={newcolor}\n                    inputRef={element => {\n                        this.state.childrefs.push(element)\n                    }}\n                />\n            )\n            return result\n        })\n        return res\n    }\n    btnClickHandler = ev => {\n        const { lastMessage, room } = this.props.messages\n        this.props.historyRetrieve(lastMessage, room)\n    }\n    checkViewedMessaged(currentScroll) {\n        let ifDispatch = false\n        let nonEmpty = this.state.childrefs.filter(value => value != null)\n        nonEmpty.forEach((value, index) => {\n            let bottom = value.offsetHeight + value.offsetTop\n            if (currentScroll >= bottom - 5) {\n                let prev = this.state.messages[index].viewed\n                if (!prev) ifDispatch = true\n                this.state.messages[index].viewed = true // eslint-disable-line\n            }\n        })\n        if (ifDispatch) {\n            this.props.indicateNewMessages(this.state.messages)\n        }\n    }\n    componentDidUpdate() {\n        const st = this.viewPort.current.scrollTop\n        const ofhei = this.viewPort.current.offsetHeight\n\n        this.checkViewedMessaged(st + ofhei)\n    }\n\n    scrollTopHandler = () => {\n        const st = this.viewPort.current.scrollTop\n        const ofhei = this.viewPort.current.offsetHeight\n        if (this.state.lastScrollTop == null) {\n            this.state.lastScrollTop = st <= 0 ? 0 : st // eslint-disable-line\n            return\n        }\n        if (st > this.state.lastScrollTop) {\n            this.checkViewedMessaged(st + ofhei)\n        } else {\n            if (st < 10) {\n                const {\n                    lastMessage,\n                    room,\n                    pendingMsgToken,\n                } = this.props.messages\n                if (!this.historyDisabled(pendingMsgToken, room, lastMessage)) {\n                    this.props.historyRetrieve(lastMessage, room)\n                }\n                if (prevMessages(lastMessage)) {\n                    this.viewPort.current.scrollTop = this.state.lastScrollTop\n                    return\n                }\n            }\n        }\n        this.state.lastScrollTop = st <= 0 ? 0 : st // eslint-disable-line\n    }\n    render() {\n        const {\n            messages,\n            pendingMsgToken,\n            room,\n            lastMessage,\n            closedscr,\n            notifyFlag,\n        } = this.props.messages\n        let historyDisabled = this.historyDisabled(\n            pendingMsgToken,\n            room,\n            lastMessage\n        )\n\n        let colorScroll = notifyFlag ? '#999999' : '#444444'\n        let pending = messages.filter(value => value.viewed === false).length\n        let hasunviewed = pending > 0\n        let arrowshift = (3 * expwidth) / 4\n        return (\n            <div className=\"msgs\">\n                <button\n                    key=\"history-btn-key\"\n                    className=\"shadowbtn btn\"\n                    style={{\n                        //width: `${expwidth}px`,\n                        height: '20px',\n                        width: `100%`,\n                    }}\n                    onClick={this.btnClickHandler}\n                    disabled={historyDisabled}\n                >\n                    {' '}\n                    hist\n                </button>\n                <div\n                    className=\"viewport\"\n                    id=\"containerElement\"\n                    ref={this.viewPort}\n                    onScroll={this.scrollTopHandler}\n                    style={{\n                        position: 'relative',\n                        height: '550px',\n                        width: `${expwidth}px`,\n                        overflow: 'scroll',\n                        overflowX: 'hidden',\n                        scrollbarWidth: 'thick',\n                        scrollbarColor: `${colorScroll} #000000`,\n                        marginBottom: '10px',\n                        border: '1px',\n                        borderRight: '0px',\n                        borderLeft: '0px',\n                        borderBottom: '1px',\n                        borderStyle: 'solid',\n                        borderColor: '#444444',\n                        alignItems: 'center',\n                    }}\n                >\n                    {closedscr ? (\n                        <div className=\"centered\">\n                            <img\n                                src=\"./ecorp.gif\"\n                                alt=\"hendrix\"\n                                width={imgdim}\n                                height={imgdim}\n                            ></img>\n                        </div>\n                    ) : (\n                        <React.Fragment>\n                            {this.renderTemplate(messages)}\n                        </React.Fragment>\n                    )}\n                </div>\n                {hasunviewed ? (\n                    <div\n                        className=\"arrow\"\n                        style={{\n                            left: `${arrowshift}px`,\n                            top: '540px',\n                        }}\n                    >\n                        <img\n                            alt=\"scroll-down\"\n                            width={30}\n                            height={30}\n                            src=\"./arrow.png\"\n                        ></img>\n                    </div>\n                ) : null}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        messages: store.messages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        historyRetrieve: (lastMessage, room) =>\n            dispatch(historyRetrieve(lastMessage, room, conn)),\n        indicateNewMessages: flag => dispatch(indicateNewMessages(flag)),\n    }\n}\n\nMessages.propTypes = {\n    messages: PropTypes.shape({\n        messages: PropTypes.array.isRequired,\n        nym: PropTypes.string,\n        lastMessage: PropTypes.number,\n        room: PropTypes.string,\n        perPage: PropTypes.number,\n        pendingMsgToken: PropTypes.string.isRequired,\n        closed: PropTypes.bool,\n        notifyFlag: PropTypes.bool,\n    }),\n    historyRetrieve: PropTypes.func.isRequired,\n    indicateNewMessages: PropTypes.func.isRequired,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages)\n","import React from 'react'\nimport './PrefixedInput.css'\nimport { expwidth } from '../containers/messages'\nconst menuSpecial = '/menu'\nconst rentRoom = '/rent-lavatory-room'\n\nfunction isString(value) {\n    return typeof value === 'string' || value instanceof String\n}\n\nclass PrefixedInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.input = React.createRef()\n    }\n    commonHandler = () => {\n        if (!this.input.current.value) return\n        let message = this.input.current.value\n        this.input.current.value = ''\n        if (message.startsWith(menuSpecial)) {\n            this.props.query()\n        } else if (message.startsWith(rentRoom)) {\n            let substr = message.split(' ')\n            if (\n                substr.length === 2 &&\n                isString(substr[1]) &&\n                substr[1].length > 0\n            ) {\n                let nextRoom = substr[1]\n                this.props.changeRoom(nextRoom)\n            } else {\n                return\n            }\n        } else {\n            this.props.sender(message)\n        }\n    }\n\n    keyPrsHandler = ev => {\n        if (ev.keyCode === 13 || ev.which === 13) {\n            this.commonHandler()\n            return false\n        } else {\n            return true\n        }\n    }\n\n    btnClickHandler = ev => {\n        ev.preventDefault()\n        this.commonHandler()\n    }\n    render() {\n        const { disabled } = this.props\n        return (\n            <div\n                className=\"table\"\n                style={{\n                    width: expwidth,\n                }}\n            >\n                <div className=\"group-header\">\n                    <div\n                        className=\"pref-input-container cell\"\n                        style={{\n                            width: expwidth - 110,\n                        }}\n                    >\n                        <input\n                            id=\"unique_say\"\n                            className=\"prefixed-input\"\n                            type=\"text\"\n                            style={{\n                                width: expwidth - 150,\n                            }}\n                            onKeyPress={this.keyPrsHandler}\n                            disabled={disabled}\n                            ref={this.input}\n                        />\n                        <span\n                            className=\"inside-prefixed-input\"\n                            style={{\n                                marginLeft: -1 * (expwidth - 135),\n                            }}\n                        >\n                            $\n                        </span>\n                    </div>\n                    <div className=\"cell\">\n                        <button\n                            className=\"shadowbtn big-btn\"\n                            onClick={this.btnClickHandler}\n                            disabled={disabled}\n                        >\n                            {' '}\n                            say\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport { PrefixedInput }\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport { connect } from 'react-redux'\n//import {} from '../actions/proto'\nimport { PrefixedInput } from '../components/PrefixedInput'\nimport { conn } from '../actions/connectionActions'\nimport { sendMessage, sendQueryMenu, initSelectroom } from '../actions/proto'\nimport './ChatProto.css'\n\nclass ChatProto extends React.Component {\n    render() {\n        const { proto, sendMessage, sendQueryMenu, initSelectroom } = this.props\n        let sendDisabled =\n            Boolean(proto.pendingMsgToken) || !Boolean(proto.room)\n        let menu = proto.room === 'Lobby' ? sendQueryMenu : () => {}\n        return (\n            <div className=\"chat-proto\">\n                <PrefixedInput\n                    sender={sendMessage}\n                    query={menu}\n                    changeRoom={initSelectroom}\n                    disabled={sendDisabled}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        proto: store.proto,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        sendMessage: message => dispatch(sendMessage(message, conn)),\n        sendQueryMenu: () => dispatch(sendQueryMenu(conn)),\n        initSelectroom: destinationRoom =>\n            dispatch(initSelectroom(conn, destinationRoom)),\n    }\n}\n\nChatProto.propTypes = {\n    proto: PropTypes.shape({\n        unhandledWsMessage: PropTypes.string,\n        nym: PropTypes.string,\n        pendingMsgToken: PropTypes.string.isRequired,\n        room: PropTypes.string,\n        perPage: PropTypes.number,\n        lastMessage: PropTypes.number,\n    }),\n    sendMessage: PropTypes.func.isRequired,\n    sendQueryMenu: PropTypes.func.isRequired,\n    initSelectroom: PropTypes.func.isRequired,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatProto)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport {\n    connectToWs,\n    connectionClose,\n    conn,\n} from '../actions/connectionActions'\nimport { initAuthenticate } from '../actions/proto'\nimport './connectionButtons.css'\n\nclass ConnectionButtons extends React.Component {\n    render() {\n        const { connection, initConnect, initAuthenticate } = this.props\n        return (\n            <div\n                className=\"cell\"\n                style={{\n                    paddingRight: '20px',\n                }}\n            >\n                <button\n                    className=\"darkbtn btn\"\n                    disabled={connection.connected || connection.connecting}\n                    onClick={initConnect}\n                >\n                    enter lobby\n                </button>\n                <button\n                    className=\"darkbtn btn\"\n                    disabled={\n                        connection.authenticated ||\n                        !connection.connected ||\n                        connection.connecting\n                    }\n                    onClick={initAuthenticate}\n                >\n                    upload consciousness\n                </button>\n                <button\n                    className=\"darkbtn btn\"\n                    disabled={!(connection.connected || connection.connecting)}\n                    onClick={connectionClose}\n                >\n                    leave hendrix\n                </button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        connection: store.connection,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        initConnect: () => dispatch(connectToWs()),\n        initAuthenticate: () => dispatch(initAuthenticate(conn)),\n    }\n}\n\nConnectionButtons.propTypes = {\n    connection: PropTypes.shape({\n        connected: PropTypes.bool.isRequired,\n        connecting: PropTypes.bool.isRequired,\n        authenticated: PropTypes.bool.isRequired,\n        error: PropTypes.string.isRequired,\n    }),\n    initConnect: PropTypes.func.isRequired,\n    initAuthenticate: PropTypes.func.isRequired,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConnectionButtons)\n","import React from 'react'\nimport ConnectionStatus from '../containers/connectionStatus.js'\nimport ChatProto from '../containers/chatProto'\nimport Messages, { expwidth } from '../containers/messages'\nimport ConnectionButtons from '../containers/connectionButtons'\nimport './App.css'\nimport { isMobileLayout } from '../utils/utils'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className={isMobileLayout() ? 'not-centered' : 'centered'}>\n                <div>\n                    <div\n                        className=\"table\"\n                        style={{\n                            width: expwidth,\n                        }}\n                    >\n                        <div className=\"group-header greyish\">\n                            <div className=\"cell stats\">\n                                <ConnectionStatus />\n                            </div>\n                            <div className=\"cell\">\n                                <div className=\"App-header\">Hendrix</div>\n                            </div>\n                            <ConnectionButtons />\n                        </div>\n                    </div>\n                    <Messages />\n                    <ChatProto />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import {\n    CONNECT_TO_WS_REQUEST,\n    CONNECT_TO_WS_ESTABLISHED,\n    CONNECT_TO_WS_ERRORED,\n    CONNECT_TO_WS_CLOSED,\n} from '../actions/connectionActions.js'\nimport { PROTO_AUTH_SUCCESS } from '../actions/proto'\nconst initialState = {\n    connected: false,\n    connecting: false,\n    authenticated: false,\n    error: '',\n}\n\nexport function connectionReducer(state = initialState, action) {\n    switch (action.type) {\n        case CONNECT_TO_WS_REQUEST:\n            return {\n                ...state,\n                connecting: true,\n            }\n        case CONNECT_TO_WS_ERRORED:\n            return {\n                ...state,\n                connecting: false,\n                error: action.payload.type,\n            }\n        case CONNECT_TO_WS_ESTABLISHED:\n            return {\n                ...state,\n                connecting: false,\n                connected: true,\n            }\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                connecting: false,\n                connected: false,\n                authenticated: false,\n            }\n        case PROTO_AUTH_SUCCESS:\n            return {\n                ...state,\n                authenticated: true,\n            }\n        default:\n            return state\n    }\n}\n","import {\n    PROTO_AUTH_STARTED,\n    PROTO_AUTH_SUCCESS,\n    PROTO_AUTH_FAIL,\n    PROTO_SELROOM_STARTED,\n    PROTO_SELROOM_SUCCESS,\n    PROTO_SELROOM_FAIL,\n    PROTO_UNKNOWN,\n    PROTO_SEND_MSG,\n} from '../actions/proto'\nimport {\n    PROTO_MSG_RCVD,\n    PROTO_MSG_FAIL,\n    PROTO_HISTORY_GET_STARTED,\n    PROTO_HISTORY_FAIL,\n    PROTO_HISTORY_SUCCESS,\n} from '../actions/messages'\nimport {\n    CONNECT_TO_WS_CLOSED,\n    CONNECT_TO_WS_ESTABLISHED,\n} from '../actions/connectionActions'\nimport { clearToken } from '../utils/utils'\n\nconst initialState = {\n    unhandledWsMessage: null,\n    nym: null,\n    pendingMsgToken: '', //false in boolean context\n    room: null,\n    perPage: null,\n    lastMessage: null, //proto - room last msg pointer/counter\n}\n\nexport function protoReducer(state = initialState, action) {\n    switch (action.type) {\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                pendingMsgToken: '',\n                nym: null,\n                room: null,\n                perPage: null,\n                lastMessage: null,\n                unhandledWsMessage: 'left Hendrix',\n            }\n        case CONNECT_TO_WS_ESTABLISHED:\n            return {\n                ...state,\n                unhandledWsMessage: 'shall set foot on Hendrix threshold',\n            }\n        case PROTO_AUTH_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_AUTH_SUCCESS:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n                nym: action.payload.nym,\n                unhandledWsMessage: 'consciousness uploaded',\n            }\n        case PROTO_AUTH_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_SELROOM_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_SELROOM_SUCCESS:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n                room: action.payload.room,\n                perPage: action.payload.perPage,\n                lastMessage: action.payload.lastMessage,\n            }\n        case PROTO_SELROOM_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_SEND_MSG:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_MSG_RCVD:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_MSG_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_HISTORY_GET_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_HISTORY_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload),\n            }\n        case PROTO_HISTORY_SUCCESS:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload.token),\n            }\n        case PROTO_UNKNOWN:\n            return {\n                ...state,\n                unhandledWsMessage: action.payload,\n            }\n        default:\n            return state\n    }\n}\n","import { PROTO_SELROOM_SUCCESS, PROTO_AUTH_SUCCESS } from '../actions/proto'\nimport {\n    PROTO_MSG_RCVD,\n    PROTO_HISTORY_GET_STARTED,\n    PROTO_HISTORY_FAIL,\n    PROTO_HISTORY_SUCCESS,\n    PROTO_MSG_CLEAR_NOTIFY,\n    CHANGED_NEW_MESSAGES_INDICATOR,\n} from '../actions/messages'\nimport { CONNECT_TO_WS_CLOSED } from '../actions/connectionActions'\nimport { clearToken } from '../utils/utils'\n\nconst initialState = {\n    messages: [],\n    nym: null,\n    lastMessage: null, //proto - room last msg pointer/counter\n    room: null,\n    perPage: null,\n    pendingMsgToken: '',\n    closedscr: null,\n    notifyFlag: null,\n}\n\nexport function messagesReducer(state = initialState, action) {\n    switch (action.type) {\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                messages: [],\n                pendingMsgToken: '',\n                lastMessage: null,\n                room: null,\n                perPage: null,\n                nym: null,\n                closedscr: true,\n            }\n        case PROTO_AUTH_SUCCESS:\n            return {\n                ...state,\n                nym: action.payload.nym,\n                closedscr: false,\n            }\n        case PROTO_SELROOM_SUCCESS:\n            return {\n                ...state,\n                messages: [],\n                lastMessage: action.payload.lastMessage,\n                room: action.payload.room,\n                perPage: action.payload.perPage,\n            }\n        case PROTO_MSG_RCVD:\n            return {\n                ...state,\n                messages: [...state.messages, action.payload],\n                notifyFlag: true,\n            }\n        case PROTO_MSG_CLEAR_NOTIFY:\n            return {\n                ...state,\n                notifyFlag: false,\n            }\n        case PROTO_HISTORY_GET_STARTED:\n            return {\n                ...state,\n                pendingMsgToken: action.payload,\n            }\n        case PROTO_HISTORY_FAIL:\n            return {\n                ...state,\n                pendingMsgToken: clearToken(state, action.payload),\n            }\n        case PROTO_HISTORY_SUCCESS:\n            if (state.room === action.payload.room) {\n                return {\n                    ...state,\n                    lastMessage: state.lastMessage - state.perPage,\n                    messages: [...action.payload.history, ...state.messages],\n                    pendingMsgToken: clearToken(state, action.payload.token),\n                }\n            } else {\n                return {\n                    ...state,\n                    pendingMsgToken: clearToken(state, action.payload.token),\n                }\n            }\n        case CHANGED_NEW_MESSAGES_INDICATOR:\n            return {\n                ...state,\n                messages: action.payload,\n            }\n        default:\n            return state\n    }\n}\n","import { PROTO_GENERIC } from '../actions/proto'\nimport { CONNECT_TO_WS_CLOSED } from '../actions/connectionActions'\n\nconst initialState = {\n    info: {},\n}\nexport function statusLastMessageReducer(state = initialState, action) {\n    switch (action.type) {\n        case PROTO_GENERIC:\n            return {\n                ...state,\n                info: action.payload,\n            }\n        case CONNECT_TO_WS_CLOSED:\n            return {\n                ...state,\n                info: {},\n            }\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport { connectionReducer } from './connection'\nimport { protoReducer } from './proto'\nimport { messagesReducer } from './messages'\nimport { statusLastMessageReducer } from './lastMessage.js'\n\nexport const rootReducer = combineReducers({\n    connection: connectionReducer,\n    proto: protoReducer,\n    messages: messagesReducer,\n    statusLast: statusLastMessageReducer,\n})\n","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from '../reducers'\n//import logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\n//export const store = createStore(() => {}, {})\n//export const store = createStore(rootReducer, applyMiddleware(logger, thunk))\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nimport { Provider } from 'react-redux'\nimport { store } from './store/configureStore'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register()\n"],"sourceRoot":""}